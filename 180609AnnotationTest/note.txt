注解的分类
  1.按照运行机制分
     1.1、源码注解：注解只在源码中存在，编译成.class文件就不存在了
           
     1.2、编译时注解：注解在源码和	.class 文件中都存在
       				@Override  ：重写（覆盖）父类中的方法
  					@Deprecated  ：设置方法过时
                    @SuppressWarnings("deprecation" ) ：忽略deprecation这个警告
                   
     1.3、运行时注解:在运行阶段还起作用，甚至会影响运行逻辑的注解
     				@Autowird
   2.按照来源分
      1.1、来自jdk的注解
      1.2、来自第三方的注解
      1.3、自定义的注解  

    3.元注解：给注解定义注解
     1. 自定义注解的要求
       以下四个元注解
       @Target({ElementType.METHOD,ElementType.TYPE})
       @Retention(RetentionPolicy.RUNTIME)
       @Inherited
       @Documented
       public @interface Description{ //使用@interface 关键字定义注解
               
               //成员的类型是受限制的，合法的类型包括原始类型以及String、Class、Annotation、Enumeration
               //如果注解只有一个成员，则成员名必须取名为value（), 在使用时可以忽略成员名和赋值号（=）
               //注解类可以没有成员，没有成员的注解称为标识注解
               
               String desc();  //成员以无参无异常方式声明
               String author();
               int age() default 18; //可以用default为指定一个默认值
       
       }  
    
    2.   作用范围
       @Target({ElementType.METHOD,ElementType.TYPE})
       构造方法声明，字段声明，局部变量声明，方法声明，包声明，参数声明，类接口，
       {ElementType.METHOD,ElementType.TYPE}
       作用在方法或类
       
       @Retention(RetentionPolicy.RUNTIME)
       生命周期
       
       @Inherited 
       允许子类继承（标识注解）
       
        @Documented
        生成Javadoc时会包含注解
        
     3.使用自定义注解
       使用注解的语法：
         @注解名（name=value，name=value，...）
         
         @Description(desc="I am eyeColor",author="Mooc boy",age = 18)
         public String eyeColor(){
            return "red";
         }
            